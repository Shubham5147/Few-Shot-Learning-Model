import torch
import torch.nn as nn
import torch.nn.functional as F

class SimpleCNN(nn.Module):
    def __init__(self):
        super(SimpleCNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, 3, padding=1)
        self.conv2 = nn.Conv2d(64, 64, 3, padding=1)
        self.pool = nn.MaxPool2d(2, 2)
        self.fc = nn.Linear(64 * 8 * 8, 64)  # Feature dimension

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = self.pool(x)
        x = F.relu(self.conv2(x))
        x = self.pool(x)
        x = x.view(x.size(0), -1)
        x = self.fc(x)
        return x

# Prototypical network logic
def compute_prototypes(features, labels, num_classes):
    prototypes = torch.zeros(num_classes, features.size(1)).to(features.device)
    for cls in range(num_classes):
        mask = (labels == cls)
        prototypes[cls] = features[mask].mean(dim=0)
    return prototypes